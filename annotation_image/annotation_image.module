<?php

function annotation_image_perm() {
  return array('administer annotation_image');
}

/**
 * Implementation of hook_comment
 */
function annotation_image_comment(&$comment, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      if (isset($comment['annotation_image']) && $comment['pid'] === '0') {
        $node = node_load($comment['nid']);
        $annotation = array(
          'vid' => $node->vid,
          'cid' => $comment['cid'],
          'field_name' => $comment['annotation_image']['field'],
          'position_top' => max(0, $comment['annotation_image']['top']),
          'position_left' => max(0, $comment['annotation_image']['left']),
          // TODO: check position.size is inside the picture
          'size_width' => $comment['annotation_image']['width'],
          'size_height' => $comment['annotation_image']['height'],
        );
        $annotations = annotation_image_annotations($node->vid);
        if (isset($annotations['c'. $comment['cid']])) {
          drupal_write_record('annotation_image', $annotation, array('vid', 'cid', 'field_name'));
        }
        else {
          drupal_write_record('annotation_image', $annotation);
        }
      }
      break;

    case 'delete':
      db_query('DELETE FROM {annotation_image} WHERE cid = %d', $comment->cid);
      break;

    case 'view':
      $annotation = annotation_get_comment_annotation($comment);
      if (!is_null($annotation)) {
        $comment->comment = theme('annotation_image_thumbnail', $annotation, $comment) . $comment->comment;
      }
      break;
  }
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function annotation_image_field_formatter_info() {
  $formatters = array(
    'annotation_image' => array(
      'label' => t('Image with annotations'),
      'field types' => array('image', 'filefield'),
      'suitability callback' => 'annotation_image_handles_file',
      'css' => array(drupal_get_path('module','annotation_image') .'/tag.css'),
      'description' => t('Display a picture and its annotations.'),
    ),
  );

  return $formatters;
}

/**
 * Load annotations for a node version.
 */
function annotation_image_annotations($vid) {
  static $annotations = array();

  if (!isset($annotations[$vid])) {
    $annotations[$vid] = array();
    $result = db_query("SELECT i.* FROM {annotation_image} i WHERE i.vid = %d ORDER BY (i.size_height*i.size_width) DESC", $vid);
    while ($annotation = db_fetch_object($result)) {
      $annotations[$vid]['c'. $annotation->cid] = $annotation;
      $annotations[$vid]['c'. $annotation->cid]->options = 'imageAnnotationOptions';
    }
  }

  return $annotations[$vid];
}

/**
 * Implementation of hook_nodeapi().
 */
function annotation_image_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      $comments = db_query("SELECT cid FROM {comments} WHERE nid = %d", $node->nid);
      while ($comment = db_fetch_object($comments)) {
        db_query("DELETE FROM {annotation_image} WHERE cid = %d", $comment->cid);
      }
      break;
  }
}

/**
 * Implementation of hook_theme
 */
function annotation_image_theme($existing, $type, $theme, $path) {
  return array(
    'annotation_image_thumbnail' => array(
      'arguments' => array(
        'annotation' => NULL,
        'comment' => NULL,
      ),
      'path' => $path . '/templates',
      'template' => 'annotation-image-thumbnail',
    ),
    'annotation_image_formatter_annotation_image' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

function annotation_image_preprocess_annotation_image_thumbnail(&$variables) {
  $annotation = $variables['annotation'];
  $comment = $variables['comment'];
  $node = node_load($comment->nid);

  list($image_width, $image_height) = getimagesize($node->{$annotation->field_name}[0]['filepath']);
  list($thumb_width, $thumb_height) = explode('x', variable_get('imagefield_thumb_size', '100x100'));
  $ratio = min($thumb_width / $image_width, $thumb_height / $image_height);

  $variables['width'] = $image_width * $ratio;
  $variables['height'] = $image_height * $ratio;
  $variables['annotation_width'] = $annotation->size_width * $ratio;
  $variables['annotation_height'] = $annotation->size_height * $ratio;
  $variables['annotation_top'] = $annotation->position_top * $ratio;
  $variables['annotation_left'] = $annotation->position_left * $ratio;
  $variables['thumbnail'] = base_path() . imagefield_file_admin_thumb_path($node->{$annotation->field_name}[0]);
}

/**
 * Theme function for the image annotate formatter
 */
function theme_annotation_image_formatter_annotation_image($element) {
  if (empty($element['#item'])) {
    return '';
  }
  $item = $element['#item'];
  $field = content_fields($element['#field_name']);
  if (empty($item['fid']) && $field['use_default_image']) {
    $item = $field['default_image'];
  }
  if (empty($item['filepath'])) {
    $item = array_merge($item, field_file_load($item['fid']));
  }
  if (!isset($item['alt'])) {
    $item['alt'] = '';
  }
  if (!isset($item['title'])) {
    $item['title'] = '';
  }

  $output = '';
  if (user_access('access comments')) {
    // Sort by area (height*width) to make sure small annotations are always on
    // the top and avoid having some unhoverable ones.
    $areas = '';
    // Build the array of notes settings
    foreach (annotation_image_annotations($element['#node']->vid) as $note) {
      $areas .= '<div class="annotation annotation-cid-'. $note->cid .' image-annotate-area" style="top: '. $note->position_top .'px; left: '. $note->position_left .'px; width: '. $note->size_width .'px; height: '. $note->size_height .'px;"><div style="width: '. ($note->size_width - 2) .'px; height: '. ($note->size_height - 2) .'px;"></div></div>';
    }

    // Load all the JS and CSS magic
    jquery_ui_add(array('ui.resizable', 'ui.draggable'));
    annotation_add_js($element['#node'], 'annotation_image', array('field', 'top', 'left', 'width', 'height'));
    drupal_add_js(drupal_get_path('module', 'annotation_image') .'/annotation_image.js');
    drupal_add_css(drupal_get_path('module', 'annotation_image') .'/annotation_image.css');

    if (user_access('post comments') || user_access('post comments without approval')) {
      $output .= '<a class="image-annotate-add" id="image-annotate-add-'. $field['field_name'] .'">'. t('Add an annotation') .'</a>';
    }
    $size = getimagesize($item['filepath']);
    $style = 'width: '. $size[0] .'px; height: '. $size[1] .'px;';
    $output .= theme('imagefield_image', $item, $item['alt'], $item['title'], array(
      'class' => 'imagefield imagefield-'. $field['field_name'] .' image-annotate-'. $field['field_name'],
    ));
    $output .= '<div class="image-annotate-canvas annotated" style="background: url('. url($item['filepath']) .'); '. $style .'">';
    $output .= '<div class="image-annotate-view" style="'. $style .'">'. $areas .'</div>';
    $output .= '<div class="image-annotate-edit" style="'. $style .'"><div class="image-annotate-edit-area"></div></div>';
    $output .= '</div>';
  }
  else {
    $output .= theme('imagefield_image', $item, $item['alt'], $item['title'], array(
      'class' => 'imagefield imagefield-'. $field['field_name'] .' image-annotate-'. $field['field_name'],
    ));
  }

  return $output;
}
