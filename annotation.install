<?php
/**
 * Implements hook_schema().
 */
function annotation_schema() {
  $schema = array();
  $schema['annotation'] = array(
    'description' => 'Stores annotations.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique item ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of annotation.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The {languages}.language of this node.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The creation datetime of the annotation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The updated datetime of the annotation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'text' => array(
        'description' => 'content of annotation',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'quote' => array(
        'description' => 'The text of this annotation.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uri' => array(
        'description' => 'Type uri of this annotation.',
        'type' => 'varchar',
        'length' => 2048, // Maximum URLs length.
        'not null' => TRUE,
        'sortable' => TRUE
      ),
      'ranges' => array(
        'description' => 'The ranges of the annotation.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'uid' => array(
        'description' => t('user id of annotation owner'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => t('ID of the node that was annotated'),
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => t('Revision ID of the node that was annotated'),
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'status' => array(
        'description' => t('Processed status of annotation'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'annotation_updated' => array('updated'),
      'annotation_created' => array('created'),
      'annotation_type' => array(array('type', 4)),
    ),
    'foreign keys' => array(
      'uid' => array('users' => 'uid'),
      'nid' => array('node' => 'nid'),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function annotation_install() {
  if (module_exists('entitycache') && !db_table_exists('cache_entity_annotation')) {
    $schema = drupal_get_schema_unprocessed('system', 'cache');
    $schema['description'] = "Cache table used to store annotation entity records.";
    db_create_table('cache_entity_annotation', $schema);
  }
}


/**
 * Implements hook_uninstall().
 */
function annotation_uninstall() {
  variable_del('annotator_store');
}


/**
 * Add node and revision ID columns to annotation store.
 */
function annotation_update_7001() {
  $new_columns = array(
    'nid' => array(
      'description' => t('ID of the node that was annotated'),
      'type' => 'int',
      'not null' => FALSE,
      'default' => 0,
    ),
    'vid' => array(
      'description' => t('Revision ID of the node that was annotated'),
      'type' => 'int',
      'not null' => FALSE,
      'default' => 0,
    ),
  );
  db_add_field('annotation', 'nid', $new_columns['nid']);
  db_add_field('annotation', 'vid', $new_columns['vid']);
}

/**
 * Add status field to the annotation table.
 */
function annotation_update_7002() {
  $status = array(
    'description' => t('Processed status of annotation'),
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('annotation', 'status', $status);
}
