<?php

function annotation_system($field){
  $system["description"] = t("Enables users to attach their text to a phrase *within* a node.");
  return $system[$field];
}

function annotation_head($main) {
  if (variable_get("annotation_replace", "superscript") == "superscript") {
    $items[] = "\n<style type=\"text/css\"> .annotation { ". variable_get("annotation_css", "vertical-align: super; cursor: help; font-size: xx-small; padding-left: 2px; font-weight: bold") ." }</style>\n";
    return $items;
  }
}  

function annotation_perm() {
  return array ("create annotations", "administer annotations");
}  

function annotation_node($field) {
  $info["name"] = t("annotation");
  $info["description"] = t("Enables users to attach their text to a phrase *within* a node");
  return $info[$field];
}

function annotation_access($op, $node) {
  if ($op == "create") {
    return user_access("create annotations");
  }
}

function annotation_save($op, $node) {
    
  // adds a 'return' link to the page after an annotation is saved.    
  $_SESSION["referer"] = url("node/view/$node->nid_2");
  
  if ($op == "create") {
    return array("comment" => 0, "nid_2" => $node->nid_2);
  }

  if ($op == "update") {
    return array("nid_2" => $node->nid_2);
  }
}

function annotation_insert($node) {
  db_query("INSERT INTO annotation (nid, nid_2) VALUES ('$node->nid', '$node->nid_2')");
}

function annotation_update($node) {
  db_query("UPDATE annotation SET nid_2 = '$node->nid_2' WHERE nid = '$node->nid'");
}

function annotation_delete($node) {
  db_query("DELETE FROM annotation WHERE nid = '$node->nid'");
}

function annotation_load($node) {
  return  db_fetch_object(db_query("SELECT nid_2 FROM annotation WHERE nid = '$node->nid'"));
}

function annotation_link($type, $node = 0, $main) {
  if ($type == "node" && in_array($node->type, variable_get("annotation_modules", array()))) {
    if ($main) {    
      $links[] = l(format_plural(annotation_num_all($node->nid), "%count annotation", "%count annotations"), "node/view/$node->nid", array("title" => t("View this %t and its annotations", array ("%t" => module_invoke($node->type, "node", "name")))));
    }
    else if (user_access("create annotations")){
      $links[] = l(t("add new annotation"), "node/add/annotation/$node->nid", array("title" => t("Attach your comment to a phrase in this post.")));
    }  
  }
  if ($type == "admin" && user_access("administer annotations")) {
    // nothing yet
  }
  if ($type == "node" && $node->type == "annotation") {
    $nid_2 = node_load(array ("nid" => $node->nid_2));    
    $links[] = l(t("annotation - "). $nid_2->title, "node/view/$node->nid_2", array ("title" => t("read the post which includes this annotation")));
  }
  return $links ? $links : array();
}

function annotation_validate($node) {
  if ($node->title) {  
    $nid_2 = node_load(array ("nid" => $node->nid_2));    
    if (!stristr($nid_2->body, $node->title)) {
      $error["title"] = "<div class=\"error\">". t("The <i>Title</i> does not exactly match any phrase in the %type", array ("%type" => module_invoke($nid_2->type, "node", "name"))). "</div>";
    }
    if (count(explode(" ", $node->body)) < variable_get("minimum_annotation_size", 0)) {
      $error["body"] = "<div class=\"error\">". t("The body of your annotation is too short.") ."</div>";
    }
  }
  return $error;
}  

function annotation_form(&$node, &$help, &$error) {

  $nid_2 = arg(3);
  $help = variable_get("annotation_help", t("The title of your annotation should be the exact text upon which you wish to comment."));
  if (arg(1) !== t("Preview")) {
    $output .= node_view(node_load(array("nid" => $node->nid_2 ? $node->nid_2 : $nid_2)));
  }  
  if ($nid_2) {
    $output .= form_hidden("nid_2", $nid_2);
  }
  else if ($node->nid_2) {
    $output .= form_hidden("nid_2", $node->nid_2);
  }
  else if (user_access("administer annotations")) {
    $output .= form_textfield(t("Source node"), "nid_2", $node->nid_2, 3, 6, t("Which node do you wish to annotate."));      
  }  
  else {
    $output .= "<div class=\"error\">". t("You may only annotate an existing node.") ."</div>";
  }  
  
  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("annotation", $node));
  }
  $output .= form_textarea(t("Body"), "body", $node->body, 60, 15, $error["body"] ? $error["body"] : t("Your reply to the author's post."));
  return $output;
}

function annotation_get($nid_2) {
  return db_query("SELECT n.*, u.name AS name FROM node n LEFT JOIN annotation a ON n.nid = a.nid LEFT JOIN users u ON n.uid = u.uid WHERE a.nid_2 = '$nid_2'");
}

function annotation_filter($text) {
  
  if (strstr(request_uri(), "node/view")) { // wish we had centralized url parsing.
    $nid = arg(2);
    $annotations = annotation_get($nid);
    while ($annotation = db_fetch_object($annotations)) {
      // replace with an icon or with superscript HTML        
      if (variable_get("annotation_replace", "superscript") == "superscript")  {
        $replace = l(t(variable_get("annotation_superscript", "i")), "node/view/$annotation->nid", array ("class" => "annotation", "title" => str_replace("\\", "\\\\", htmlentities($annotation->title. " by $annotation->name: ". $annotation->body))));
      }
      else {
        $img = "<img align = \"\" src=\"". variable_get("annotation_icon", "misc/annotation.gif"). "\" border=\"0\"/>";
        $replace = l($img, "node/view/$annotation->nid", array ("title" => str_replace("\\", "\\\\", htmlentities($annotation->title. ": ". $annotation->body))));
      }
      $candidate = $annotation->title;        
      $text = annotation_insertlink($text, preg_quote($candidate), $replace, variable_get("annotation_case", "0"), variable_get("annotation_match", "b"));
    }
  }
  elseif (strstr(request_uri(), "node/add/annotation")) {
    // TODO: figure out how to inject during Preview. Maybe do this in the _form() hook
  }  
  return $text;
}  

/**
* this function is duplicated in glossary.module and possibly more
*
* insert annoatation link $insert in $text after the first $match that is not inside a link.
* 
* $strcase is 0 for case insensitive matching and 1 for case sensitive matching.
* 
* $parameter descibes the type of match
* b: require word break left and right
* lr: require word break left or right
* l: require word break left
* r: require word break right
* s or no value: match any substring
*/
function annotation_insertlink($text, $match, $insert, $strcase, $parameter = "") {

  if ($strcase) {
    $first = strpos($text, $match); // first occurrence of $match
  }
  else {
    $temp = stristr($text, $match); 
    $first = strlen($text) - strlen($temp); // first occurrence of $match
    if ($temp === false) $first = false;
  }
  if ($first !== false) { // no match at all. Requires php post 4.0b3
    $textlen = strlen($text);
    while ($first <= $textlen) {
      $test = substr($text, 0, $first); // text before $match
      $ende = substr($text, $first + strlen($match)); // text after $match
      $open = substr_count($test, "<a ");
      $close = substr_count($test, "</a>");
      if ($open <= $close) { // Not in an open link
        $regex = "[[:punct:][:space:][:cntrl:]]";
        $ok = 1;
        switch ($parameter) {
          case "lr": // require word break left or right
              if (!ereg($regex, substr($test, -1)) && !ereg($regex, substr($ende, 0, 1))) {
                $ok = 0;
              }
              break;
          case "b": // require word break left and right
              if (!ereg($regex, substr($test, -1)) || !ereg($regex, substr($ende, 0, 1))) {
                $ok = 0;
              }
              break;
          case "l":  // require word break left
              if (!ereg($regex, substr($test, -1))) {
                $ok = 0;
              }
              break;
          case "r": // require word break right
              if (!ereg($regex, substr($ende, 0, 1))) {
                $ok = 0;
              }
              break;
          case "s": // match any substring
          default: 
              break;
        }
        if ($ok) { // found match
          // get original string because of case (in)sensitive match.
          $match = substr($text, strlen($test), strlen($match));
          $newtext = $test . $match . $insert . $ende; 
          break;
        }
        else { // next try
          $first = strpos($ende, $match) + $first + strlen($match);
        }
      }
      else { // inside link, need next match
        $first = strpos($ende, $match) + $first + strlen($match);
      }
    }
  }
  else { // No match found.
    $newtext = $text;
  }

  return $newtext;
}

function annotation_num_all($nid) {
  $annotations = db_num_rows(db_query("SELECT n.nid FROM node n LEFT JOIN annotation a ON n.nid=a.nid WHERE n.status != '0' AND a.nid_2 = '$nid'"));
  return $annotations;
}

function annotation_settings() {
  foreach (module_list() as $file) {
    if ($name = module_invoke($file, "node", "name")) $names[$file] = $name;
  }
  unset($names["annotation"]);
  $output .= form_select(t("Modules"), "annotation_modules", variable_get("annotation_modules", ""), $names, t("Select the node types to which users may attach annotations."), "", 1);
  $output .= form_select(t("Annotation Indicator"), "annotation_replace", variable_get("annotation_replace", "superscript"), array ("superscript" => "superscript", "icon" => "icon"), t("Display annotations using either a superscript formatted link or an icon."));
  $output .= form_textfield(t("Superscript"), "annotation_superscript", variable_get("annotation_superscript", "i"), 15, 255, t("If you choose %b1 annotation %b2 above, enter the  superscript text.",array ("%b1" => "<b>", "%b2" => "</b>")));
  $output .= form_textfield(t("Superscript-CSS"), "annotation_css", variable_get("annotation_css", "vertical-align: super; cursor: help; font-size: xx-small; padding-left: 2px; font-weight: bold"), 15, 255, t("If you choose %b1 superscript %b2 above, enter the CSS that should be used by the user's browser to render the superscript.",array ("%b1" => "<b>", "%b2" => "</b>")));
  $output .= form_textfield(t("Annotation Icon URL"), "annotation_icon", variable_get("annotation_icon", "misc/annotation.gif"), 50, 255, t("If you choose %b1 icon %b2 above, enter the URL of the annotation icon relative to the root of your Drupal site.", array ("%b1" => "<b>", "%b2" => "</b>")));
  $output .= form_select(t("Match type"), "annotation_match", variable_get("annotation_match", "match"), array ("b" => "word", "lr" => "right or left substring", "l" => "left substring", "r" => "right substring", "s" => "any substring"), t("Choose the match type of annotation links."));
  $output .= form_select(t("Case sensitive"), "annotation_case", variable_get("annotation_case", "0"), array ("0" => "case insensitive", "1" => "case sensitive"), t("Match either case sensitive or not."));
  $output .= form_textarea("Explanation or submission guidelines", "annotation_help", variable_get("annotation_help", t("The title of your annotation should be the exact text upon which you wish to comment.")), 55, 4, "This text will be displayed at the top of the annotation submission form.  Useful for helping or instructing your users.");
  $output .= form_select(t("Minimum number of words"), "minimum_annotation_size", variable_get("minimum_annotation_size", 0), array(0 => "0 words", 10 => "10 words", 25 => "25 words",  50 => "50 words", 75 => "75 words", 100 => "100 words", 125 => "125 words",  150 => "150 words", 175 => "175 words", 200 => "200 words"), t("The minimum number of words an annotation should consist of.  This can be useful to rule out submissions that do not meet the site's standards, such as short test posts."));
  $output .= form_submit("Submit");
  return $output;
}

#function annotation_help() {
#  $output .= "<p>tbd</p>";
#  return $output;
#}

?>
