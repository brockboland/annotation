<?php

/**
 * Add JS common to annotation modules.
 *
 * @param $node
 *   The node object being annotated.
 * @param $type
 *   String type of annotation.
 * @param $fields
 *   An array of data fields used by this annotation.
 */
function annotation_add_js($node, $type, $fields = array()) {
  annotation_is_active(TRUE);
  drupal_add_js(drupal_get_path('module', 'beautytips') .'/other_libs/jquery.hoverIntent.minified.js');
  beautytips_add_beautytips();
  drupal_add_css(drupal_get_path('module', 'annotation') .'/annotation.css');
  drupal_add_js(drupal_get_path('module', 'annotation') .'/annotation.js');
  if (user_access('post comments')) {
    drupal_add_js(array('annotation' => array(
      'form' => drupal_get_form('annotation_form', $node, $type, $fields),
    )), 'setting');  
  }

  $annotations = module_invoke_all('annotations', $node->vid);
  foreach ($annotations as $annotation) {
    $comment = _comment_load($annotation->cid);
    $comment->annotation = $annotation;
    $content = theme('annotation_comment', $comment);
    $result = db_query('SELECT * FROM {comments} WHERE pid = %d ORDER BY cid', $annotation->cid);
    while ($reply = db_fetch_object($result)) {
      $content .= theme('annotation_comment', $reply, TRUE);
    }
    drupal_add_js(array('annotationComments' => array(
      'cid-'. $comment->cid => $content,
    )), 'setting');
    drupal_add_js(array('annotationCommentsSource' => array(
      'cid-'. $comment->cid => $comment,
    )), 'setting');
  }
}

/**
 * Returns TRUE if annotations are active for this page.
 */
function annotation_is_active($set = NULL) {
  static $active = FALSE;
  if (!is_null($set)) {
    $active = $set;
  }
  return $active;
}

function annotation_theme($existing, $type, $theme, $path) {
  return array(
    'annotation_comment' => array(
      'arguments' => array(
        'comment' => NULL,
        'reply' => FALSE,
      ),
      'path' => $path .'/templates/',
      'template' => 'annotation_comment',
    ),
  );
}

function annotation_preprocess_annotation_comment($arguments, $hook) {
  $arguments['name'] = theme('username', $arguments['comment']);
  $arguments['time'] = format_date($arguments['comment']->timestamp, 'small');
  $arguments['body'] = check_markup($arguments['comment']->comment, $arguments['comment']->format);
  $links = array();
  if (!$arguments['reply']) {
    $links['annotation_full_thread'] = array(
      'title' => t('View full thread'),
      'href' => $_REQUEST['q'],
      'fragment' => 'comment-'. $arguments['comment']->cid,
    );
  }
  if (user_access('post comments') && comment_access('edit', $arguments['comment'])) {
    $links['annotation_edit'] = array(
      'title' => t('Edit'),
      'href' => $_REQUEST['q'],
      'fragment' => 'annotation-edit-'. $arguments['comment']->cid,
    );
  }
  drupal_alter('link', $links, $arguments['comment']);
  $arguments['links'] = theme('links', $links);
}

function annotation_form_js_access($node) {
  return (user_access('post comments') && (node_comment_mode($node->nid) == COMMENT_NODE_READ_WRITE));
}

function annotation_form(&$form_state, $node, $type, $fields = array()) {
  global $user;
  $form = array();

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $user->uid,
  );
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  $form['comment'] = array(
    '#cols' => 30,
    '#type' => 'textarea',
    '#required' => TRUE,
    '#resizable' => FALSE,
  );
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $user->uid,
  );
  $form['cid'] = array(
    '#type' => 'hidden',
    '#default_value' => 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save comment'),
    '#attributes' => array('disabled' => 'disabled'),
  );
  $form[] = array('#value' => '<a class="cancel" href="#">'. t('Cancel') .'</a>');

  $form[$type] = array('#tree' => TRUE);
  foreach ($fields as $field) {
    $form[$type][$field] = array('#type' => 'hidden');
  }

  return $form;
}

function annotation_form_submit($form, &$form_state) {
  comment_form_submit($form, $form_state);
  $form_state['redirect'][2] = str_replace('comment-', 'annotation-cid-', $form_state['redirect'][2]);
}

function annotation_link($type, $object, $teaser = FALSE) {
  if ($type === 'comment' && annotation_is_active()) {
    $node = node_load($object->nid);
    $annotations = module_invoke_all('annotations', $node->vid);
    if (isset($annotations['c'. $object->cid])) {
      return array(
        'annotation_link' => array(
          'title' => t('View annotation'),
          'href' => $_GET['q'],
          'fragment' => 'annotation-cid-'. $object->cid,
          'attributes' => array(
            'class' => 'annotation-link',
          ),
        ),
      );
    }
  }
}
